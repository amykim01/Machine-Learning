{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Polynomial Regression\n",
        "Polynomial regression is a form of regression analysis in which the relationship between the independent variable x and the dependent variable y is modelled as an n-th degree polynomial in x. "
      ],
      "metadata": {
        "id": "f5ZsX54FTgxb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "$ Y = β_0 + β_1X_1 + β_2X_1^2 + β_3X_1^3 + ... + β_pX_1^p $"
      ],
      "metadata": {
        "id": "wT__Xxhqshtr"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8ewJHoKHPi-1"
      },
      "outputs": [],
      "source": [
        "# importing libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn import linear_model, metrics, model_selection"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1IK2NlvGUlgL",
        "outputId": "358e29e6-41f8-4920-972b-67e0818efe56"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('drive/MyDrive/kc_house_data.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "U0PCbkBvUvOE",
        "outputId": "f985de0a-b6cb-4311-a31c-dc7e10dd9118"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               id             date     price  bedrooms  bathrooms  \\\n",
              "0      7129300520  20141013T000000  221900.0         3       1.00   \n",
              "1      6414100192  20141209T000000  538000.0         3       2.25   \n",
              "2      5631500400  20150225T000000  180000.0         2       1.00   \n",
              "3      2487200875  20141209T000000  604000.0         4       3.00   \n",
              "4      1954400510  20150218T000000  510000.0         3       2.00   \n",
              "...           ...              ...       ...       ...        ...   \n",
              "21608   263000018  20140521T000000  360000.0         3       2.50   \n",
              "21609  6600060120  20150223T000000  400000.0         4       2.50   \n",
              "21610  1523300141  20140623T000000  402101.0         2       0.75   \n",
              "21611   291310100  20150116T000000  400000.0         3       2.50   \n",
              "21612  1523300157  20141015T000000  325000.0         2       0.75   \n",
              "\n",
              "       sqft_living  sqft_lot  floors  waterfront  view  ...  grade  \\\n",
              "0             1180      5650     1.0           0     0  ...      7   \n",
              "1             2570      7242     2.0           0     0  ...      7   \n",
              "2              770     10000     1.0           0     0  ...      6   \n",
              "3             1960      5000     1.0           0     0  ...      7   \n",
              "4             1680      8080     1.0           0     0  ...      8   \n",
              "...            ...       ...     ...         ...   ...  ...    ...   \n",
              "21608         1530      1131     3.0           0     0  ...      8   \n",
              "21609         2310      5813     2.0           0     0  ...      8   \n",
              "21610         1020      1350     2.0           0     0  ...      7   \n",
              "21611         1600      2388     2.0           0     0  ...      8   \n",
              "21612         1020      1076     2.0           0     0  ...      7   \n",
              "\n",
              "       sqft_above  sqft_basement  yr_built  yr_renovated  zipcode      lat  \\\n",
              "0            1180              0      1955             0    98178  47.5112   \n",
              "1            2170            400      1951          1991    98125  47.7210   \n",
              "2             770              0      1933             0    98028  47.7379   \n",
              "3            1050            910      1965             0    98136  47.5208   \n",
              "4            1680              0      1987             0    98074  47.6168   \n",
              "...           ...            ...       ...           ...      ...      ...   \n",
              "21608        1530              0      2009             0    98103  47.6993   \n",
              "21609        2310              0      2014             0    98146  47.5107   \n",
              "21610        1020              0      2009             0    98144  47.5944   \n",
              "21611        1600              0      2004             0    98027  47.5345   \n",
              "21612        1020              0      2008             0    98144  47.5941   \n",
              "\n",
              "          long  sqft_living15  sqft_lot15  \n",
              "0     -122.257           1340        5650  \n",
              "1     -122.319           1690        7639  \n",
              "2     -122.233           2720        8062  \n",
              "3     -122.393           1360        5000  \n",
              "4     -122.045           1800        7503  \n",
              "...        ...            ...         ...  \n",
              "21608 -122.346           1530        1509  \n",
              "21609 -122.362           1830        7200  \n",
              "21610 -122.299           1020        2007  \n",
              "21611 -122.069           1410        1287  \n",
              "21612 -122.299           1020        1357  \n",
              "\n",
              "[21613 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e4f02bce-686b-494e-8bfd-f348fe182806\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>date</th>\n",
              "      <th>price</th>\n",
              "      <th>bedrooms</th>\n",
              "      <th>bathrooms</th>\n",
              "      <th>sqft_living</th>\n",
              "      <th>sqft_lot</th>\n",
              "      <th>floors</th>\n",
              "      <th>waterfront</th>\n",
              "      <th>view</th>\n",
              "      <th>...</th>\n",
              "      <th>grade</th>\n",
              "      <th>sqft_above</th>\n",
              "      <th>sqft_basement</th>\n",
              "      <th>yr_built</th>\n",
              "      <th>yr_renovated</th>\n",
              "      <th>zipcode</th>\n",
              "      <th>lat</th>\n",
              "      <th>long</th>\n",
              "      <th>sqft_living15</th>\n",
              "      <th>sqft_lot15</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7129300520</td>\n",
              "      <td>20141013T000000</td>\n",
              "      <td>221900.0</td>\n",
              "      <td>3</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1180</td>\n",
              "      <td>5650</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1180</td>\n",
              "      <td>0</td>\n",
              "      <td>1955</td>\n",
              "      <td>0</td>\n",
              "      <td>98178</td>\n",
              "      <td>47.5112</td>\n",
              "      <td>-122.257</td>\n",
              "      <td>1340</td>\n",
              "      <td>5650</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6414100192</td>\n",
              "      <td>20141209T000000</td>\n",
              "      <td>538000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.25</td>\n",
              "      <td>2570</td>\n",
              "      <td>7242</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>2170</td>\n",
              "      <td>400</td>\n",
              "      <td>1951</td>\n",
              "      <td>1991</td>\n",
              "      <td>98125</td>\n",
              "      <td>47.7210</td>\n",
              "      <td>-122.319</td>\n",
              "      <td>1690</td>\n",
              "      <td>7639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5631500400</td>\n",
              "      <td>20150225T000000</td>\n",
              "      <td>180000.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.00</td>\n",
              "      <td>770</td>\n",
              "      <td>10000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>770</td>\n",
              "      <td>0</td>\n",
              "      <td>1933</td>\n",
              "      <td>0</td>\n",
              "      <td>98028</td>\n",
              "      <td>47.7379</td>\n",
              "      <td>-122.233</td>\n",
              "      <td>2720</td>\n",
              "      <td>8062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2487200875</td>\n",
              "      <td>20141209T000000</td>\n",
              "      <td>604000.0</td>\n",
              "      <td>4</td>\n",
              "      <td>3.00</td>\n",
              "      <td>1960</td>\n",
              "      <td>5000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1050</td>\n",
              "      <td>910</td>\n",
              "      <td>1965</td>\n",
              "      <td>0</td>\n",
              "      <td>98136</td>\n",
              "      <td>47.5208</td>\n",
              "      <td>-122.393</td>\n",
              "      <td>1360</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1954400510</td>\n",
              "      <td>20150218T000000</td>\n",
              "      <td>510000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1680</td>\n",
              "      <td>8080</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>1680</td>\n",
              "      <td>0</td>\n",
              "      <td>1987</td>\n",
              "      <td>0</td>\n",
              "      <td>98074</td>\n",
              "      <td>47.6168</td>\n",
              "      <td>-122.045</td>\n",
              "      <td>1800</td>\n",
              "      <td>7503</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21608</th>\n",
              "      <td>263000018</td>\n",
              "      <td>20140521T000000</td>\n",
              "      <td>360000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.50</td>\n",
              "      <td>1530</td>\n",
              "      <td>1131</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>1530</td>\n",
              "      <td>0</td>\n",
              "      <td>2009</td>\n",
              "      <td>0</td>\n",
              "      <td>98103</td>\n",
              "      <td>47.6993</td>\n",
              "      <td>-122.346</td>\n",
              "      <td>1530</td>\n",
              "      <td>1509</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21609</th>\n",
              "      <td>6600060120</td>\n",
              "      <td>20150223T000000</td>\n",
              "      <td>400000.0</td>\n",
              "      <td>4</td>\n",
              "      <td>2.50</td>\n",
              "      <td>2310</td>\n",
              "      <td>5813</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>2310</td>\n",
              "      <td>0</td>\n",
              "      <td>2014</td>\n",
              "      <td>0</td>\n",
              "      <td>98146</td>\n",
              "      <td>47.5107</td>\n",
              "      <td>-122.362</td>\n",
              "      <td>1830</td>\n",
              "      <td>7200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21610</th>\n",
              "      <td>1523300141</td>\n",
              "      <td>20140623T000000</td>\n",
              "      <td>402101.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.75</td>\n",
              "      <td>1020</td>\n",
              "      <td>1350</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1020</td>\n",
              "      <td>0</td>\n",
              "      <td>2009</td>\n",
              "      <td>0</td>\n",
              "      <td>98144</td>\n",
              "      <td>47.5944</td>\n",
              "      <td>-122.299</td>\n",
              "      <td>1020</td>\n",
              "      <td>2007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21611</th>\n",
              "      <td>291310100</td>\n",
              "      <td>20150116T000000</td>\n",
              "      <td>400000.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.50</td>\n",
              "      <td>1600</td>\n",
              "      <td>2388</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8</td>\n",
              "      <td>1600</td>\n",
              "      <td>0</td>\n",
              "      <td>2004</td>\n",
              "      <td>0</td>\n",
              "      <td>98027</td>\n",
              "      <td>47.5345</td>\n",
              "      <td>-122.069</td>\n",
              "      <td>1410</td>\n",
              "      <td>1287</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21612</th>\n",
              "      <td>1523300157</td>\n",
              "      <td>20141015T000000</td>\n",
              "      <td>325000.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.75</td>\n",
              "      <td>1020</td>\n",
              "      <td>1076</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>1020</td>\n",
              "      <td>0</td>\n",
              "      <td>2008</td>\n",
              "      <td>0</td>\n",
              "      <td>98144</td>\n",
              "      <td>47.5941</td>\n",
              "      <td>-122.299</td>\n",
              "      <td>1020</td>\n",
              "      <td>1357</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21613 rows × 21 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e4f02bce-686b-494e-8bfd-f348fe182806')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e4f02bce-686b-494e-8bfd-f348fe182806 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e4f02bce-686b-494e-8bfd-f348fe182806');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# slim the data by picking target and features\n",
        "target = ['price']\n",
        "features = ['sqft_living']\n",
        "\n",
        "df1 = df[target + features]\n",
        "df1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "zlzcvvAHU6p5",
        "outputId": "22acbe7d-e79c-45bd-e8fe-d94d0e273c0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          price  sqft_living\n",
              "0      221900.0         1180\n",
              "1      538000.0         2570\n",
              "2      180000.0          770\n",
              "3      604000.0         1960\n",
              "4      510000.0         1680\n",
              "...         ...          ...\n",
              "21608  360000.0         1530\n",
              "21609  400000.0         2310\n",
              "21610  402101.0         1020\n",
              "21611  400000.0         1600\n",
              "21612  325000.0         1020\n",
              "\n",
              "[21613 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-42cc6966-db8f-4841-8099-89f2ab1a304f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>sqft_living</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>221900.0</td>\n",
              "      <td>1180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>538000.0</td>\n",
              "      <td>2570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>180000.0</td>\n",
              "      <td>770</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>604000.0</td>\n",
              "      <td>1960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>510000.0</td>\n",
              "      <td>1680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21608</th>\n",
              "      <td>360000.0</td>\n",
              "      <td>1530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21609</th>\n",
              "      <td>400000.0</td>\n",
              "      <td>2310</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21610</th>\n",
              "      <td>402101.0</td>\n",
              "      <td>1020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21611</th>\n",
              "      <td>400000.0</td>\n",
              "      <td>1600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21612</th>\n",
              "      <td>325000.0</td>\n",
              "      <td>1020</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21613 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42cc6966-db8f-4841-8099-89f2ab1a304f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-42cc6966-db8f-4841-8099-89f2ab1a304f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-42cc6966-db8f-4841-8099-89f2ab1a304f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# This function returns a new dataframe,\n",
        "# which contains all powers of features from 2 to what you like.\n",
        "\n",
        "def create_poly_feature(df, feature, degree):\n",
        "    result = pd.DataFrame()\n",
        "    if feature in df.columns:\n",
        "        # loop over the degrees:\n",
        "        for power in range(2,  degree+1): \n",
        "            # first we'll give the column a name:\n",
        "            name = feature + '^' + str(power)\n",
        "\n",
        "            # then assign df[name] to the appropriate power of feature\n",
        "            result[name] = df[feature].astype(float) ** power\n",
        "        return result\n",
        "    else:\n",
        "        return print(\"Please select a feature in this df!\")"
      ],
      "metadata": {
        "id": "fv_13zHBVLSa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's start with polynomials of degree 2 using `sqft_living` (i.e. a curve) to predict `price` and plot what it looks like.\n",
        "\n"
      ],
      "metadata": {
        "id": "-IjF0r2uH2qT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "##Create abstract model\n",
        "poly_model_6 = linear_model.LinearRegression()\n",
        "\n",
        "##Create polynomial features\n",
        "col_poly_sqft_6 = create_poly_feature(df1, 'sqft_living', 6)\n",
        "display(col_poly_sqft)\n",
        "\n",
        "##Concatinate polynomial features with slim data\n",
        "df1_processed_6 = pd.concat([col_poly_sqft_6,df1], axis=1)\n",
        "display(df1_processed_6)\n",
        "\n",
        "##Split the data between target and features\n",
        "X_6 = df1_processed_6.drop('price',axis = 1).values\n",
        "Y = df1['price'].values"
      ],
      "metadata": {
        "id": "00PjU2NRVZsz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "outputId": "398ae40a-7b5f-4020-cfda-9e4b11c6954f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "       sqft_living^2  sqft_living^3  sqft_living^4  sqft_living^5  \\\n",
              "0          1392400.0   1.643032e+09   1.938778e+12   2.287758e+15   \n",
              "1          6604900.0   1.697459e+10   4.362470e+13   1.121155e+17   \n",
              "2           592900.0   4.565330e+08   3.515304e+11   2.706784e+14   \n",
              "3          3841600.0   7.529536e+09   1.475789e+13   2.892547e+16   \n",
              "4          2822400.0   4.741632e+09   7.965942e+12   1.338278e+16   \n",
              "...              ...            ...            ...            ...   \n",
              "21608      2340900.0   3.581577e+09   5.479813e+12   8.384114e+15   \n",
              "21609      5336100.0   1.232639e+10   2.847396e+13   6.577486e+16   \n",
              "21610      1040400.0   1.061208e+09   1.082432e+12   1.104081e+15   \n",
              "21611      2560000.0   4.096000e+09   6.553600e+12   1.048576e+16   \n",
              "21612      1040400.0   1.061208e+09   1.082432e+12   1.104081e+15   \n",
              "\n",
              "       sqft_living^6     price  sqft_living  \n",
              "0       2.699554e+18  221900.0         1180  \n",
              "1       2.881368e+20  538000.0         2570  \n",
              "2       2.084224e+17  180000.0          770  \n",
              "3       5.669391e+19  604000.0         1960  \n",
              "4       2.248307e+19  510000.0         1680  \n",
              "...              ...       ...          ...  \n",
              "21608   1.282769e+19  360000.0         1530  \n",
              "21609   1.519399e+20  400000.0         2310  \n",
              "21610   1.126162e+18  402101.0         1020  \n",
              "21611   1.677722e+19  400000.0         1600  \n",
              "21612   1.126162e+18  325000.0         1020  \n",
              "\n",
              "[21613 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-20ae7f78-5699-4b7a-91e1-46f135f2e7b5\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sqft_living^2</th>\n",
              "      <th>sqft_living^3</th>\n",
              "      <th>sqft_living^4</th>\n",
              "      <th>sqft_living^5</th>\n",
              "      <th>sqft_living^6</th>\n",
              "      <th>price</th>\n",
              "      <th>sqft_living</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1392400.0</td>\n",
              "      <td>1.643032e+09</td>\n",
              "      <td>1.938778e+12</td>\n",
              "      <td>2.287758e+15</td>\n",
              "      <td>2.699554e+18</td>\n",
              "      <td>221900.0</td>\n",
              "      <td>1180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6604900.0</td>\n",
              "      <td>1.697459e+10</td>\n",
              "      <td>4.362470e+13</td>\n",
              "      <td>1.121155e+17</td>\n",
              "      <td>2.881368e+20</td>\n",
              "      <td>538000.0</td>\n",
              "      <td>2570</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>592900.0</td>\n",
              "      <td>4.565330e+08</td>\n",
              "      <td>3.515304e+11</td>\n",
              "      <td>2.706784e+14</td>\n",
              "      <td>2.084224e+17</td>\n",
              "      <td>180000.0</td>\n",
              "      <td>770</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3841600.0</td>\n",
              "      <td>7.529536e+09</td>\n",
              "      <td>1.475789e+13</td>\n",
              "      <td>2.892547e+16</td>\n",
              "      <td>5.669391e+19</td>\n",
              "      <td>604000.0</td>\n",
              "      <td>1960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2822400.0</td>\n",
              "      <td>4.741632e+09</td>\n",
              "      <td>7.965942e+12</td>\n",
              "      <td>1.338278e+16</td>\n",
              "      <td>2.248307e+19</td>\n",
              "      <td>510000.0</td>\n",
              "      <td>1680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21608</th>\n",
              "      <td>2340900.0</td>\n",
              "      <td>3.581577e+09</td>\n",
              "      <td>5.479813e+12</td>\n",
              "      <td>8.384114e+15</td>\n",
              "      <td>1.282769e+19</td>\n",
              "      <td>360000.0</td>\n",
              "      <td>1530</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21609</th>\n",
              "      <td>5336100.0</td>\n",
              "      <td>1.232639e+10</td>\n",
              "      <td>2.847396e+13</td>\n",
              "      <td>6.577486e+16</td>\n",
              "      <td>1.519399e+20</td>\n",
              "      <td>400000.0</td>\n",
              "      <td>2310</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21610</th>\n",
              "      <td>1040400.0</td>\n",
              "      <td>1.061208e+09</td>\n",
              "      <td>1.082432e+12</td>\n",
              "      <td>1.104081e+15</td>\n",
              "      <td>1.126162e+18</td>\n",
              "      <td>402101.0</td>\n",
              "      <td>1020</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21611</th>\n",
              "      <td>2560000.0</td>\n",
              "      <td>4.096000e+09</td>\n",
              "      <td>6.553600e+12</td>\n",
              "      <td>1.048576e+16</td>\n",
              "      <td>1.677722e+19</td>\n",
              "      <td>400000.0</td>\n",
              "      <td>1600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21612</th>\n",
              "      <td>1040400.0</td>\n",
              "      <td>1.061208e+09</td>\n",
              "      <td>1.082432e+12</td>\n",
              "      <td>1.104081e+15</td>\n",
              "      <td>1.126162e+18</td>\n",
              "      <td>325000.0</td>\n",
              "      <td>1020</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21613 rows × 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20ae7f78-5699-4b7a-91e1-46f135f2e7b5')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-20ae7f78-5699-4b7a-91e1-46f135f2e7b5 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-20ae7f78-5699-4b7a-91e1-46f135f2e7b5');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Fit the model\n",
        "poly_model_6.fit(X_6, Y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I4akSlj4Velq",
        "outputId": "2c710b9e-f3ad-4a06-f071-470dba41cc40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. give 100 segment points from the min to max\n",
        "sample_points = np.linspace(df1.sqft_living.min(), df1.sqft_living.max(), 100)\n",
        "\n",
        "# 2. change into a dataframe\n",
        "x_plot = pd.DataFrame(sample_points, columns=['sampled'])\n",
        "display(x_plot)\n",
        "\n",
        "# 3. create polynomial features and do prediction\n",
        "col_poly_pred_6 = create_poly_feature(x_plot, 'sampled', 6)\n",
        "sample_processed_6 = pd.concat([col_poly_pred_6, x_plot], axis=1)\n",
        "display(sample_processed_6)\n",
        "y_plot_6 = poly_model_6.predict(sample_processed_6)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 855
        },
        "id": "-QP12HSGYz2P",
        "outputId": "34443c07-4da7-468c-bc8b-6f371bdc689f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "         sampled\n",
              "0     290.000000\n",
              "1     423.838384\n",
              "2     557.676768\n",
              "3     691.515152\n",
              "4     825.353535\n",
              "..           ...\n",
              "95  13004.646465\n",
              "96  13138.484848\n",
              "97  13272.323232\n",
              "98  13406.161616\n",
              "99  13540.000000\n",
              "\n",
              "[100 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-46c18ff1-70da-430b-ae7d-190d75a8d534\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sampled</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>290.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>423.838384</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>557.676768</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>691.515152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>825.353535</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>13004.646465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>13138.484848</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>13272.323232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>13406.161616</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>13540.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 1 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46c18ff1-70da-430b-ae7d-190d75a8d534')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-46c18ff1-70da-430b-ae7d-190d75a8d534 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-46c18ff1-70da-430b-ae7d-190d75a8d534');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "       sampled^2     sampled^3     sampled^4     sampled^5     sampled^6  \\\n",
              "0   8.410000e+04  2.438900e+07  7.072810e+09  2.051115e+12  5.948233e+14   \n",
              "1   1.796390e+05  7.613789e+07  3.227016e+10  1.367733e+13  5.796979e+15   \n",
              "2   3.110034e+05  1.734394e+08  9.672310e+10  5.394023e+13  3.008121e+16   \n",
              "3   4.781932e+05  3.306778e+08  2.286687e+11  1.581279e+14  1.093478e+17   \n",
              "4   6.812085e+05  5.622378e+08  4.640450e+11  3.830012e+14  3.161114e+17   \n",
              "..           ...           ...           ...           ...           ...   \n",
              "95  1.691208e+08  2.199357e+12  2.860186e+16  3.719570e+20  4.837169e+24   \n",
              "96  1.726198e+08  2.267962e+12  2.979759e+16  3.914952e+20  5.143654e+24   \n",
              "97  1.761546e+08  2.337980e+12  3.103043e+16  4.118459e+20  5.466152e+24   \n",
              "98  1.797252e+08  2.409425e+12  3.230114e+16  4.330343e+20  5.805327e+24   \n",
              "99  1.833316e+08  2.482310e+12  3.361048e+16  4.550858e+20  6.161862e+24   \n",
              "\n",
              "         sampled  \n",
              "0     290.000000  \n",
              "1     423.838384  \n",
              "2     557.676768  \n",
              "3     691.515152  \n",
              "4     825.353535  \n",
              "..           ...  \n",
              "95  13004.646465  \n",
              "96  13138.484848  \n",
              "97  13272.323232  \n",
              "98  13406.161616  \n",
              "99  13540.000000  \n",
              "\n",
              "[100 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d518bc1c-e205-4844-87a4-6969354ba193\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sampled^2</th>\n",
              "      <th>sampled^3</th>\n",
              "      <th>sampled^4</th>\n",
              "      <th>sampled^5</th>\n",
              "      <th>sampled^6</th>\n",
              "      <th>sampled</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>8.410000e+04</td>\n",
              "      <td>2.438900e+07</td>\n",
              "      <td>7.072810e+09</td>\n",
              "      <td>2.051115e+12</td>\n",
              "      <td>5.948233e+14</td>\n",
              "      <td>290.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.796390e+05</td>\n",
              "      <td>7.613789e+07</td>\n",
              "      <td>3.227016e+10</td>\n",
              "      <td>1.367733e+13</td>\n",
              "      <td>5.796979e+15</td>\n",
              "      <td>423.838384</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.110034e+05</td>\n",
              "      <td>1.734394e+08</td>\n",
              "      <td>9.672310e+10</td>\n",
              "      <td>5.394023e+13</td>\n",
              "      <td>3.008121e+16</td>\n",
              "      <td>557.676768</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4.781932e+05</td>\n",
              "      <td>3.306778e+08</td>\n",
              "      <td>2.286687e+11</td>\n",
              "      <td>1.581279e+14</td>\n",
              "      <td>1.093478e+17</td>\n",
              "      <td>691.515152</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>6.812085e+05</td>\n",
              "      <td>5.622378e+08</td>\n",
              "      <td>4.640450e+11</td>\n",
              "      <td>3.830012e+14</td>\n",
              "      <td>3.161114e+17</td>\n",
              "      <td>825.353535</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>1.691208e+08</td>\n",
              "      <td>2.199357e+12</td>\n",
              "      <td>2.860186e+16</td>\n",
              "      <td>3.719570e+20</td>\n",
              "      <td>4.837169e+24</td>\n",
              "      <td>13004.646465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>1.726198e+08</td>\n",
              "      <td>2.267962e+12</td>\n",
              "      <td>2.979759e+16</td>\n",
              "      <td>3.914952e+20</td>\n",
              "      <td>5.143654e+24</td>\n",
              "      <td>13138.484848</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>1.761546e+08</td>\n",
              "      <td>2.337980e+12</td>\n",
              "      <td>3.103043e+16</td>\n",
              "      <td>4.118459e+20</td>\n",
              "      <td>5.466152e+24</td>\n",
              "      <td>13272.323232</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>1.797252e+08</td>\n",
              "      <td>2.409425e+12</td>\n",
              "      <td>3.230114e+16</td>\n",
              "      <td>4.330343e+20</td>\n",
              "      <td>5.805327e+24</td>\n",
              "      <td>13406.161616</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>1.833316e+08</td>\n",
              "      <td>2.482310e+12</td>\n",
              "      <td>3.361048e+16</td>\n",
              "      <td>4.550858e+20</td>\n",
              "      <td>6.161862e+24</td>\n",
              "      <td>13540.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 6 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d518bc1c-e205-4844-87a4-6969354ba193')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d518bc1c-e205-4844-87a4-6969354ba193 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d518bc1c-e205-4844-87a4-6969354ba193');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/sklearn/base.py:443: UserWarning: X has feature names, but LinearRegression was fitted without feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15,10))\n",
        "plt.scatter(df1.sqft_living, df1.price, color='navy', s=10, marker='o', label=\"training points\")\n",
        "plt.plot(x_plot.sampled, y_plot_6, color='teal', linewidth=2,\n",
        "             label=\"degree 6\")\n",
        "plt.legend(loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 602
        },
        "id": "r36Jo3nXJ2QC",
        "outputId": "1efcbab8-3e07-477b-c69a-1c8103df0fd7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ],
            "image/png": "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hPz8fJjNZgwZMgRDhw4FADz66KN444030LNnT+zYsQO//OUvsXnzZvz617/Gr3/9a2RkZOCNN96wO97u3btx4MABJCUl4c0330RCQgJ27tyJqqoqjBw5EjqdDseOHcOxY8fwww8/QBRF6PV6fPPNNxgzZoztOJcvXwYA/OlPf8KWLVuQnJyMJUuWoG3btv6/QERERESkCL0+hYkYOdVoKmRbt27F9OnTERsbi2bNmkGv1wOo3YT5+++/x+zZs5GamorMzEycO3cOALBt2zbMnj0bAHDffffZHe+WW25BUlISAMBoNOK9995Damoqhg8fjosXL+LYsWMwGo0wGo0YPHgwhgwZgiNHjuDYsWN2xzGbzThz5gxuu+027N69G7feeiuefPLJQF8OIiIiIiIKAYpUyNxVsoLNarWiefPmyM/P9+l1cXFxtv8WRRGvvfYaJk2aZPecDRs24Pe//z0yMzNdHqdly5aIjY3FjBkzAACzZ8/G22+/7VMsREREREQUnhpNhWzMmDFYs2YNrl+/jqtXr2Lt2rUAgGbNmiEpKQmrVq0CUJtc7d27FwAwYsQI28TDjz76yOWxJ02ahNdffx01NbXTc44ePYpr165h0qRJeOedd1BRUQEAOHv2LC5cuGD3WkEQMG3aNGzZsgUAsGnTJvTt29d/b5yIiIiIiEJWo5myOGTIENxzzz0YNGgQ2rRpg2HDhtl+tmLFCjz++OP461//ipqaGtx7770YNGgQFi9ejLlz52LRokWYPHkyEhISnB774YcfxsmTJzFkyBCIoojWrVtjzZo10Ol0OHz4MG699VYAQHx8PD744AO0adPG7vUvvvgifvazn2HBggVo3bo1li9fHrgLQUREREREIUMQRdHvB01LSxPz8vLsHjt8+DD69Onj93MFkslkQpMmTSAIAj766CNkZ2fjs88+UzqsoAjHz4uIiIiIKFQIgrBLFMU0T89rNBWy+ti1axfmz58PURTRvHlzvPPOO0qHREREREREEYQJmRujR4+2rScjIiIioshWbbHgeFkZRFFEh6ZN0TwmBoIgKB0WRbigJmSiKPJLHQYC0cZKREREFCquVFXhSGkpDpeU4HBpae1/l5aisKwMFtl9UIxGg/bx8ejQtKntfx2bNsWUnj3R32EmAFF9BS0hi4mJwcWLF9GyZUsmZSFMFEVcvHgRMTExSodC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RERERER6N26KevQ1h8y7vampbdSmKM6cOYFrrpnFtm2tJBLJjPL9EycWM23aBCorL3LnaqmMu4iIiIhIfqnKYj9455jFYkU88cTKggVlixbNAsjatNrhVICMxYrZvPkNkknL7cGVPnIFCrpERERERIaTqiz2Q7Y5ZtmCsVWrrqSjoyvv5fAjkZBbTfDOOzeRSCQJhw0f//gCZsyYkDW4Chr9q6mp9AVfCsREREREREYeBWRkn2PmrCsuDjN79iS6u3u4666rWL9+OfF4C88+eyCwHH44bNxgLhSCWbMm0tZ2BoDi4jDJZA/JpEUkEuJjH5vP73/fxrRpMdatu9ENnJ58cnXWUa2g+wq4RERERERGn5xSFo0xtwL/CISBxy3LeqC3x4+2lEUIHmXKdd5ZaWkJ7e2d7s+gkSylEIqIiIiIjB95m0NmjAkDfwT+C3AIeAn4tGVZr2d7zmgMyERERERERPIl14Aslz5kHwL2Wpa137KsLuDHwB2D3UEREREREZHxLpeArBx4y3P/UGqdjzHmi8aYHcaYHcePH8/X/omIiIiIiIxZuQRkObEs658ty1psWdbiadOm5etlRURERERExqxcArI2YLbn/iWpdSIiIiIiIjIIuQRkLwFXGGMqjDHFwKeA+NDuloiIiIiIyNjXZx8yy7K6jTFrgC3YZe+/b1nWa0O+ZyIiIiIiImNcTo2hLctqABqGeF9ERERERETGlbwV9RAREREREZH+UUAmIiIiIiJSIArIRERERERECkQBmYiIiIiISIEoIBMRERERESkQBWQiIiIiIiIFooBMRERERESkQBSQiYiIiIiIFIgCMhERERERkQJRQCYiIiIiIlIgCshEREREREQKRAGZiIiIiIhIgSggExERERERKRAFZCIiIiIiIgViLMvK/4sacxw4kOeXLQNO5Pk1pTB0LMcOHcuxQ8dybNBxHDt0LMcOHcuxo7/Hco5lWdP6etCQBGRDwRizw7KsxYXeDxk8HcuxQ8dy7NCxHBt0HMcOHcuxQ8dy7BiqY6mURRERERERkQJRQCYiIiIiIlIgoykg++dC74DkjY7l2KFjOXboWI4NOo5jh47l2KFjOXYMybEcNXPIRERERERExprRNEImIiIiIiIypiggExERERERKZARH5AZY241xrQYY/YaY+4t9P5IJmPMbGPMvxtjXjfGvGaM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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A **Hyperparameter** is the level of order to be used, and we must carefully select it. We must determine the ideal degree since a polynomial with a high degree will attempt to overfit the data, while a polynomial with a low degree will attempt to underfit the data."
      ],
      "metadata": {
        "id": "BSfpEgqftIYo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Split into training and test\n",
        "df1_train, df1_test = model_selection.train_test_split(df1,  test_size = 0.25, random_state=42)\n",
        "\n",
        "#for degree from 1 to 15, build models on training data, compute the RMSE and  𝑅2 on test data\n",
        "for degree in range(1,16):\n",
        "    model = linear_model.LinearRegression()\n",
        "    col_poly_train = create_poly_feature(df1_train, 'sqft_living', degree)\n",
        "    sales_train_processed = pd.concat([df1_train, col_poly_train], axis=1)\n",
        "    \n",
        "    train_X = sales_train_processed.drop('price', axis=1).values\n",
        "    train_Y = sales_train_processed['price'].values\n",
        "    model.fit(train_X, train_Y)\n",
        "    \n",
        "    col_poly_test = create_poly_feature(df1_test, 'sqft_living', degree)\n",
        "    sales_test_processed = pd.concat([df1_test, col_poly_test], axis=1)\n",
        "    \n",
        "    test_X = sales_test_processed.drop('price', axis=1).values\n",
        "    test_Y = sales_test_processed['price'].values\n",
        "    \n",
        "    test_Y_fit = model.predict(test_X)\n",
        "    \n",
        "    print(\"degree %d, square root of mean squared error: %.2f, R2 score: %.2f\"\n",
        "      % (degree, np.sqrt(metrics.mean_squared_error(test_Y, test_Y_fit)), metrics.r2_score(test_Y,test_Y_fit)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ubZ82L06tH5y",
        "outputId": "b72f055a-6bdb-4154-e31f-9f9a9df1dcfe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "degree 1, square root of mean squared error: 274446.42, R2 score: 0.50\n",
            "degree 2, square root of mean squared error: 278416.01, R2 score: 0.48\n",
            "degree 3, square root of mean squared error: 280913.65, R2 score: 0.47\n",
            "degree 4, square root of mean squared error: 290295.60, R2 score: 0.44\n",
            "degree 5, square root of mean squared error: 291457.72, R2 score: 0.43\n",
            "degree 6, square root of mean squared error: 262798.24, R2 score: 0.54\n",
            "degree 7, square root of mean squared error: 383257.00, R2 score: 0.02\n",
            "degree 8, square root of mean squared error: 1117668.65, R2 score: -7.35\n",
            "degree 9, square root of mean squared error: 2950984.72, R2 score: -57.22\n",
            "degree 10, square root of mean squared error: 6852864.15, R2 score: -312.94\n",
            "degree 11, square root of mean squared error: 14451252.89, R2 score: -1395.10\n",
            "degree 12, square root of mean squared error: 27899626.37, R2 score: -5202.57\n",
            "degree 13, square root of mean squared error: 43945510.33, R2 score: -12909.21\n",
            "degree 14, square root of mean squared error: 16735053.64, R2 score: -1871.23\n",
            "degree 15, square root of mean squared error: 26383336.43, R2 score: -4652.33\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since degree 6 has the highest R2 score, we can conclude that degree 6 is the best fit for this data set."
      ],
      "metadata": {
        "id": "_mRjrfg8Zdia"
      }
    }
  ]
}
